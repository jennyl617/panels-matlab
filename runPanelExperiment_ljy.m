function expResults = runPanelExperiment(direct, random)

% function data = runPanelExperiment(direct)
% This function runs the protocols generated by 'createExpStruct' and
% 'createProtocolsScript' and collects the gennerated data. 
% The function runs a session for each seperate protocol and saves after each one 
%
% INPUT
% direct - relevant 'on_SDcard' directory in which expStruct is save and to which 
%          the generated data would be saved. expStruct is generated as
%          stated above, and should contain pattern, posFunc, and protocol
%          fields. It is also recommended to use 'checkExpStruct' to verify
%          that the protocols are referring to the right files. 
% random - logical (optional). Flag for whether the protocols should be 
%          presented in a random order or not. Default is random
%
% OUTPUT 
% expResults  -  fill in later
%          data aquired for each protocol is an N X 6 matrix with N being 
%          the number of samples, and 5 channels which are: 
%          (1) membrane Current (2) membrane Voltage (3)X position (4) Y
%          position (5) protocol identifier (6)photodiode data

if nargin <2
    random = 1;
end

%daqreset

load(fullfile(direct, 'ExpStruct.mat'))

%check that patterns and posFunc in expStruct match the SD card
Panel_com('sync_sd_info') %updates the SD.mat file based on SD card in controller
pause(2)
load 'D:\Michael_Reiser\Xmega_C_V13\XmegaController_Matlab_V13\controller\SD.mat'
sdPatNames = SD.pattern.pattNames;
expStPatNames = {expStruct.pattern(:).name};
sdPosFuncNames = SD.function.posFunctionName;
expStPosFuncNames = {expStruct.posFunc(:).name};

patNamesCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPatNames, sdPatNames));
posFuncNameCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPosFuncNames, sdPosFuncNames));

if ~patNamesCheck || ~posFuncNameCheck
    error('SD card content does not agree with ExpStruct')
end


nProt = numel(expStruct.protocol);

if random 
    %moving the random square presentation to the end
    tempnProt = randperm(nProt);
    expOrder = [tempnProt(tempnProt ~= 6), 6];
   
else
    expOrder = 1:nProt;
end

expOrder

% setting up the session

ses = daq.createSession('ni');
ses.addAnalogInputChannel('Dev1',0:5, 'Voltage');

ses.Channels(1).InputType = 'SingleEnded';
ses.Channels(2).InputType = 'SingleEnded';
ses.Channels(3).InputType = 'SingleEnded';
ses.Channels(4).InputType = 'SingleEnded';
ses.Channels(5).InputType = 'SingleEnded';
ses.Channels(6).InputType = 'SingleEnded';
ses.Rate = 10000;

disp(['session rate is: ', num2str(ses.Rate)])

expResults = struct;

for ii=1:nProt
    
    relInd = expOrder(ii);
    currProt = expStruct.protocol(relInd);
    % Making sure channel 3 is set to 0
    Panel_com('set_ao', [3, 0])
    pause(0.03)
   
    
    expResults(ii).protocolNum = relInd;
    
    ses.DurationInSeconds = currProt.Duration; 
    
    Panel_com('set_pattern_id', currProt.PatternID);   
    pause(0.03)
    Panel_com('set_position', currProt.InitialPosition);  
    pause(0.03)
    Panel_com('set_mode', currProt.Mode);
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncX); 
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncY); 
    pause(0.03)
    Panel_com('set_funcx_freq' , currProt.FuncFreqX);
    pause(0.03)
    Panel_com('set_funcy_freq' , currProt.FuncFreqY);
    pause(0.03)
    Panel_com('send_gain_bias', currProt.Gain);
    pause(0.03)
    Panel_com('set_ao', [3, currProt.OutputVol*(32767/10)])
    pause(0.03)
    
    relPat = expStruct.protocol(relInd).PatternID;
    patName = expStruct.pattern(relPat).name;
    sprintf(['Presenting protocol %d of %d:', patName], ii, nProt) 

    Panel_com('start')
    data = ses.startForeground;
    expResults(ii).data = data;
    %in case experiment crashes
    save(fullfile(direct, 'tempResults.mat'), 'expResults')
    Panel_com('stop')
    
end

timeStamp = arrayfun(@(x) ['_', num2str(fix(x))], clock, 'uniformoutput', 0);
timeStamp = [timeStamp{:}];
save(fullfile(direct, ['expResults', timeStamp,]), 'expResults')

delete(fullfile(direct, 'tempResults.mat'))
Panel_com('all_off')


end
    
    


